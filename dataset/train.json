{"instruction": "hasAnimation(boolean hasAnim)\n", "output": "/**\n     * 是否带动画弹出Dialog\n     *\n     * @param hasAnim\n     * @return\n     */"}
{"instruction": "showTopHeader(boolean isShow)\n", "output": "/**\n     * 是否显示窗体标题栏Header\n     *\n     * @param isShow\n     * @return\n     */"}
{"instruction": "setBodyTitle(CharSequence mBodyTitle)\n", "output": "/**\n     * 设置窗体Body区域的标题，支持HTML格式文本\n     *\n     * @param mBodyTitle\n     * @return\n     */"}
{"instruction": "setWinSubTitle(CharSequence mWinSubTitle)\n", "output": "/**\n     * 设置窗体副标题，支持HTML格式文本\n     *\n     * @param mWinSubTitle\n     * @return\n     */"}
{"instruction": "setOperationBtnDirection(int mDirection)\n", "output": " /**\n     * 设置操作按钮的方向，水平/垂直,默认水平方向OperationDialog.HORIZONTAL\n     *\n     * @param mDirection\n     * @return\n     */"}
{"instruction": "setBodyMsg(CharSequence mBodyMsg)\n", "output": "/**\n     * 设置窗体Body区域的消息文本，支持HTML格式文本\n     *\n     * @param mBodyMsg\n     * @return\n     */"}
{"instruction": "showTitleClose(boolean isShow)\n", "output": "/**\n     * 是否显示标题栏关闭按钮\n     *\n     * @param isShow\n     * @return\n     */"}
{"instruction": "addOperationBtn(int id, String label)\n", "output": "/**\n     * 添加操作按钮\n     *\n     * @param btn 按钮属性Bean\n     * @return\n     */"}
{"instruction": "setWinMainTitle(CharSequence mWinMainTitle)\n", "output": "/**\n     * 设置窗体主标题，支持HTML格式文本\n     *\n     * @param mWinMainTitle\n     * @return\n     */"}
{"instruction": "showButtomFooter(boolean isShow)\n", "output": "/**\n     * 是否显示底部Footer\n     *\n     * @param isShow\n     * @return\n     */"}
{"instruction": "addParagraph(Paragraph mParagraph)\n", "output": "  /**\n     * 添加段落文本内容\n     *\n     * @param mParagraph 段落文本\n     * @return\n     */"}
{"instruction": "setStatusBarTransparent(boolean isTransparent,boolean isTextBlack)\n", "output": "/**\n     * 设置展示沉浸式状态栏\n     *\n     * @param isTransparent 是否透明状态栏\n     * @param isTextBlack 状态栏是否反黑字体\n     * @return\n     */"}
{"instruction": "showColorText(Context context, String msg, int color)\n", "output": "/**\n     * 建议使用 showText(Context context, String strText,int duration,String bgColor)\n     * @param context\n     * @param msg\n     * @param color\n     */"}
{"instruction": "initRightDoneBtn(String strBtnText, String textColor, View.OnClickListener mClickListener)\n", "output": "/**\n     * 初始化标题栏右侧[完成/提交]按钮\n     *\n     * @param strBtnText     按钮显示文本\n     * @param mClickListener 点击监听事件\n     * @param textColor      文本颜色\n     */"}
{"instruction": "showRightText(String text, View.OnClickListener listener)\n", "output": "/**\n     * 右侧只显示文本\n     * @param text 文本\n     * @param listener 文本点击响应\n     */"}
{"instruction": "displayImage(Context mContext, ImageView imageView, String url)\n", "output": "/**\n     * 显示图片\n     *\n     * @param mContext\n     * @param imageView\n     * @param url\n     */"}
{"instruction": "initPagePVParam()\n", "output": "/**\n     * 获取统计页面PV入参\n     *\n     * @return\n     */"}
{"instruction": "getColor(String strColor, String defaultColor)\n", "output": "/**\n     * 判断从接口拿到的color是否可用，可用的话返回可用的color，否则返回默认的\n     *\n     * @param strColor\n     * @param defaultColor\n     * @return\n     */"}
{"instruction": "setTitleBarBg(String strResName)\n", "output": "/**\n     * 设置标题栏背景图片\n     *\n     * @param strResName 图片资源文件名称，如：actionbar_bg\n     */"}
{"instruction": "setTitleBarBgColor(int mResId)\n", "output": "/**\n     * 设置标题栏背景颜色\n     *\n     * @param mResId 背景资源文件-->mContext.getResources().getColor(R.color.actionbar_bg)\n     */"}
{"instruction": "JRButton\n", "output": "按钮控件（防止快速点击+默认选择器）"}
{"instruction": "showText(Context context, String strText,int duration,String bgColor)\n", "output": "/**\n     * 自定义背景色的Toast\n     * @param context 必须是 activity\n     * @param strText 文案\n     * @param duration 时长\n     * @param bgColor 背景色\n     */"}
{"instruction": "hiddenLeftBackBtn(int mViewStatus)\n", "output": "/**\n     * 隐藏标题栏左侧[返回]按钮\n     *\n     * @param mViewStatus 按钮的状态 View.GONE/View.INVISIBLE\n     */"}
{"instruction": "createAndShowDialogWithTitle(Context context,String title,String messageHint,int contentGravity,String titleTextColor,String[] optionsText,String[] optionsTextColors,OnOptionsSelectedListener l)\n", "output": "/**\n     * 创建可带标题，标题和选项颜色可自定义，对齐方式可自定义的Dialog\n     *\n     * @param context\n     * @param title 标题内容\n     * @param contentGravity 对齐方式 Gravity.LEFT/Gravity.CENTER/Gravity.RIGHT/\n     * @param titleTextColor 标题颜色，默认#999999\n     * @param optionsText 选项数组\n     * @param optionsTextColors 设置与optionsText对应位置选项文字的颜色，默认#333333\n     * @param l 选项点击监听回调\n     * @return\n     */"}
{"instruction": "playInAnimation(View view, Animator.AnimatorListener mListener)\n", "output": "/**\n     * 对话框显示动画\n     *\n     * @param view\n     */"}
{"instruction": "createAndShowWithLeftGravityTitle(Context context, String title, String[] optionsText, OnOptionsSelectedListener l)\n", "output": " /**\n     * 主要用于设置头像\n     *\n     * @param context\n     * @param title 标题内容\n     * @param optionsText 选项内容\n     * @param l 选项点击监听回调\n     * @return\n     */"}
{"instruction": "showNormalTips(Context context, String strText)\n", "output": "/**\n     * 显示普通一般的消息提示，背景黑色#000000\n     *\n     * @param context 上下文\n     * @param strText 消息文本\n     */"}
{"instruction": "setWindowTitle(CharSequence strTitle, int mTitleGravity)\n", "output": "/**\n     * 设置标题以及文本对齐方式\n     *\n     * @param strTitle      标题文本\n     * @param mTitleGravity 标题文本对齐方式\n     */"}
{"instruction": "makeText(Context context, String text, int length)\n", "output": "/**\n     * 已废弃,推荐使用 showText(Context context, String text, int length)\n     * @param context\n     * @param text\n     * @param length\n     * @return\n     */"}
{"instruction": "JRPlaceHolderDrawable(Context context, float radiusPX, String solidColor)\n", "output": "/**\n     * 通用imageView占位图\n     * @param context    上下文\n     * @param radiiPx    背景圆弧数组（像素单位）\n     * @param solidColor 背景色\n     */"}
{"instruction": "setSelectorForView(View view)\n", "output": "/**\n     * 为view自动创建5%黑点击态（适用于纯色背景,要求view背景色不为空）\n     *\n     * @param view 目标view\n     */"}
{"instruction": "hiddenLeftCloseBtn(int mViewStatus)\n", "output": "/**\n     * 隐藏标题栏左侧[返回]按钮\n     *\n     * @param mViewStatus 按钮的状态 View.GONE/View.INVISIBLE\n     */"}
{"instruction": "showSuccessMessage(Context context, String strText)\n", "output": "/**\n     * 显示操作成功类消息提示类型toast\n     *\n     * @param context 上下文\n     * @param strText 消息文本\n     */"}
{"instruction": "showText(Context context, String strText,int duration,int res)\n", "output": "/**\n     * 自定义左侧图标的Toast\n     * @param context 必须是 activity\n     * @param strText 文案\n     * @param duration 时长\n     * @param res 左侧图标\n     */"}
{"instruction": "hiddenRightDoneBtn(int mViewStatus)\n", "output": "/**\n     * 隐藏标题栏右侧[完成/提交]按钮\n     *\n     * @param mViewStatus 按钮的状态 View.GONE/View.INVISIBLE\n     */"}
{"instruction": "createAndShowDialogWithTitleAndTopIcon(Context context,String title,float titleSize,int contentGravity,String titleTextColor,Drawable topIconDrawable,int drawablePadding,String[] optionsText,String[] optionsTextColors,OnOptionsSelectedListener l)\n", "output": "/**\n     * 创建可带标题，标题和选项颜色可自定义，对齐方式可自定义的Dialog\n     *\n     * @param context\n     * @param title 标题内容\n     * @param contentGravity 对齐方式 Gravity.LEFT/Gravity.CENTER/Gravity.RIGHT/\n     * @param titleTextColor 标题颜色，默认#999999\n     * @param topIconDrawable\n     * @param optionsText 选项数组\n     * @param optionsTextColors 设置与optionsText对应位置选项文字的颜色，默认#333333\n     * @param l 选项点击监听回调\n     * @return\n     */"}
{"instruction": "JRPlaceHolderDrawable(Context context, float radiusPX)\n", "output": "/**\n     * @param context  上下文\n     * @param radiusPX 背景圆弧（像素单位）\n     */"}
{"instruction": "getSlideable()\n", "output": "/**\n     * 设置是支持左滑事件  需要放在子Activity的onCreate后\n     * 默认为true  返回false则不支持该功能\n     */"}
{"instruction": "getColor(String strColor)\n", "output": "/**\n     * 判断从接口拿到的color是否可用，可用的话返回可用的color， 否则返回-1,特别注意，当返回-1时不要使用！所以使用前需要判断\n     *\n     * @param strColor\n     * @return\n     */"}
{"instruction": "showImportantTips(Context context, String strText)\n", "output": "/**\n     * 显示重要的消息提示，背景橙色#FFB540\n     *\n     * @param context 上下文\n     * @param strText 消息文本\n     */"}
{"instruction": "reportPagePV(final String pageName, final Map<String, Object> pageParam)\n", "output": "/**\n     * 统计页面PV,如需要传递参数的Activity，复写改方法，传入入参即可\n     *\n     * @param pageName  页面名称，传入this.getClass().getName()即可\n     * @param pageParam 页面入参，没有传入null\n     */"}
{"instruction": "showText(Context context, String strText,int duration,String bgColor,int res)\n", "output": " /**\n     * 自定义左侧图标和背景色的Toast\n     * @param context 必须是 activity\n     * @param strText 文案\n     * @param duration 时长\n     * @param bgColor 背景色\n     * @param res 左侧图标\n     */"}
{"instruction": "reportExposureResource(View view)\n", "output": "/**\n     * 单个View曝光\n     *\n     * @param view\n     */"}
{"instruction": "setUdcTextV2(TextView tv, boolean isBold)\n", "output": "/**\n     * 新版 UDC 字体\n     * @param tv\n     * @param isBold\n     */"}
{"instruction": "setUdcOrChineseV2Bold(String text, AppCompatTextView tv_2_4, int chinese, int num)\n", "output": "/**\n     *\n     * @param text 文字默认加粗\n     * @param tv_2_4\n     * @param chinese 中文字体大小 dp\n     * @param num 数字字体大小 dp\n     */"}
{"instruction": "getRoundedOptions(int errorImageResid, int roundPixels)\n", "output": "/**\n     * 获取圆角Option，有缓存\n     *\n     * @param errorImageResid\n     * @param roundPixels\n     * @return\n     */"}
{"instruction": "setUdcOrChineseV2(String text, AppCompatTextView tv_2_4, int chinese, int num, boolean isBold,boolean isChineseAutoSize)\n", "output": "/**\n     *\n     * @param text\n     * @param tv_2_4\n     * @param chinese 中文字体大小 dp\n     * @param num     数字字体大小 dp\n     * @param isBold  是否加粗\n     * @param isChineseAutoSize 是否中文自适应\n     */"}
{"instruction": "setUdcOrChineseV2(String text, AppCompatTextView tv_2_4, int chinese, int num, boolean isChineseBold, boolean isNumBold,boolean isChineseAutoSize)\n", "output": "/**@param text\n     * @param tv_2_4\n     * @param chinese 中文字体大小 dp 带有等比缩放\n     * @param num     数字字体大小 dp 带有等比缩放\n     * @param isChineseBold  是否中文加粗\n     * @param isNumBold  是否数字加粗\n     * @param isChineseAutoSize  是否中文自适应\n     */"}
{"instruction": "setCommonText(TempletTextBean textBean,TextView textView,int visibleTypeIfNull,String defaultTextColor,String defaultBgColor)\n", "output": "/**\n     * 设置模板中的文字到TextView,为空时使用visibleTypeIfNull\n     *\n     * @param textBean\n     * @param textView\n     * @param visibleTypeIfNull\n     */"}
{"instruction": "setCommonText(TempletTextBean textBean, TextView textView, String defaultTextColor)\n", "output": "/**\n     * 设置模板中的文字到TextView,下发字体颜色为空时，给默认标注中文字颜色\n     *\n     * @param textBean\n     * @param textView\n     * @param defaultTextColor\n     */"}
{"instruction": "setTextBgCorner(TempletTextBean textBean,TextView tv,String defaultColor,String defaultBgColor,int dp,int goneOrInvisible)\n", "output": "/**\n     * 设置标签textview,字体颜色，背景色以及圆角度\n     *\n     * @param textBean\n     * @param tv\n     * @param defaultColor\n     * @param defaultBgColor\n     * @param dp\n     * @param goneOrInvisible\n     */"}
{"instruction": "setUdcOrChinese(String text, AppCompatTextView tv_2_4, int chinese, int num, boolean isBold)\n", "output": " /**\n     * 使用udc字体时候 中英数 3种切换字号大小不一样, 工具方法\n     *\n     * @param text\n     * @param tv_2_4\n     * @param chinese 中文字体大小 dp\n     * @param num     数字字体大小 dp\n     * @param isBold  是否加粗\n     */"}
{"instruction": "setElementBackgroundColor(View mView, ITempletDataAble element, String defaultColor)\n", "output": "/**\n     * 设置元素背景色\n     *\n     * @param mView\n     * @param element\n     * @param defaultColor 默认背景色\n     */"}
{"instruction": "getSelectColorsDrawble(int[] colors)\n", "output": " /**\n     * 设置Color selector(int值用此方法)\n     *\n     * @param colors 长度最长为3，依次为正常态、点击态、不可用态\n     * @return\n     */"}
{"instruction": "trackPoint(View view, int position, Object rowData)\n", "output": "/**\n     * 统一处理点击跳转+埋点\n     *\n     * @param view\n     * @param position\n     * @param rowData\n     */"}
{"instruction": "setWindowTitle(CharSequence strTitle, int mTitleGravity, String textColor)\n", "output": "/**\n     * 设置标题以及文本对齐方式\n     *\n     * @param strTitle      标题文本\n     * @param mTitleGravity 标题文本对齐方式\n     */"}
{"instruction": "showColorText(Context context, String msg, int color,int length)\n", "output": "/**\n     * 废弃，建议 showText(Context context, String strText,int duration,String bgColor)\n     * @param context\n     * @param msg\n     * @param color\n     * @param length\n     */"}
{"instruction": "createAndShow(Context context, String[] optionsText, OnOptionsSelectedListener l)\n", "output": "/**\n     * 创建选项对话框并显示，无标题\n     *\n     * @param context\n     * @param optionsText 元素不能小于2\n     * @param l\n     * @return\n     */"}
{"instruction": "setUdcOrChinese(String text, AppCompatTextView tv_2_4, int chinese, int num, boolean isChineseBold, boolean isNumBold)\n", "output": "/** @param text\n     * @param tv_2_4\n     * @param chinese 中文字体大小 dp\n     * @param num     数字字体大小 dp\n     * @param isChineseBold  是否中文加粗 默认\n     * @param isNumBold  是否数字加粗\n     */"}
{"instruction": "setSelectorForView(View view, String bgColor)\n", "output": "/**\n     * 为view自动创建5%黑点击态（适用于纯色背景,要求view背景色不为空）\n     *\n     * @param view    目标view\n     * @param bgColor 目标View正常显示的背景色\n     */"}
{"instruction": "bindJumpTrackData(ForwardBean forward, MTATrackBean track, View targetView)\n", "output": "/**\n     * 绑定跳转体和埋点到view上\n     * @param forward 跳转体数据\n     * @param track 埋点数据\n     */"}
{"instruction": "bindJumpTrackData(ForwardBean forward, MTATrackBean track, View targetView)\n", "output": "/**\n     * 绑定跳转体和埋点到指定view上\n     * @param forward 跳转体数据\n     * @param track 埋点数据\n     * @param targetView 需要指定的view\n     */"}

